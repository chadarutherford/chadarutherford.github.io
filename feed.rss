<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Chad Rutherford</title><description>iOS Developer with experience in Swift and Objective-C</description><link>https://chadarutherford.github.io</link><language>en</language><lastBuildDate>Sat, 3 Oct 2020 00:06:07 +0000</lastBuildDate><pubDate>Sat, 3 Oct 2020 00:06:07 +0000</pubDate><ttl>250</ttl><atom:link href="https://chadarutherford.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://chadarutherford.github.io/posts/2020-10-01JetFuelTakeHome</guid><title>Implementing a take home challenge for practice</title><description>Practicing take home challenges</description><link>https://chadarutherford.github.io/posts/2020-10-01JetFuelTakeHome</link><pubDate>Thu, 1 Oct 2020 11:00:00 +0000</pubDate><content:encoded><![CDATA[<h2>Attempting a Take Home Challenge</h2><hr><p>In search of new ways to keep my skills sharp, I recently decided to go in search of an iOS take home challenge I could complete. I stumbled on a take home project from reallabs called the JetFuel Take Home Exercise here: <a href="https://github.com/reallabs/ios-take-home">TakeHomeChallenge</a></p><p>So to start out, I started a new Xcode project, setting up my structure and adding the testing framework.</p><p>Then after completing the restructure I decided this was going to really stretch my skills by utilizing the nested UICollectionViews inside each other 100% programmatically. To do this I had to go into the info.plist -&gt; Application Scene Manifest -&gt; Scene Configuration -&gt; Application Session Role -&gt; Item 0 and remove the key for Storyboard Name (click on the minus). After that, I went to the general settings for the project and deleted Main from the Main interface section. The only thing left to do to remove a storyboard approach wqas to remove Main.Storyboard from the project.</p><p>Next was setting up a programmatic approach in SceneDelegate. Thankfully they already had a decent starting point to which I could add on to. I named the windowScene Apple set up to windowScene instead of _. Next I had to create a window by setting <code></code><code>window = UIWindow(windowScene: windowScene)</code><code></code>. I then set <code></code><code>window.rootViewController = ViewController</code><code></code> and set <code></code><code>window.makeKeyAndVisible()</code><code></code>. To prove I set this up correctly, I went into ViewController.swift and inside viewDidLoad(), I set <code></code><code>view.backgroundColor = .systemTeal</code><code></code>. Build and run....</p><img src="https://chadarutherford.github.io/images/posts/TakeHomeChallenge/testScreen.png" alt="testScreen" width="500"/><p>Success!</p><p>Now on to making this a collectionview. I went back to SceneDelegate and created a Navigation Controller with the view controller as the root with the following code.</p><pre><code><span class="keyword">let</span> layout = <span class="type">UICollectionViewFlowLayout</span>()
layout.<span class="property">scrollDirection</span> = .<span class="dotAccess">vertical</span>
<span class="keyword">let</span> feedCollectionViewController = <span class="type">FeedCollectionViewController</span>(collectionViewLayout: layout)
<span class="keyword">let</span> navController = <span class="type">UINavigationController</span>(rootViewController: feedCollectionViewController)
window?.<span class="property">rootViewController</span> = navController
window?.<span class="call">makeKeyAndVisible</span>()
</code></pre><p>This gave me a setup UICollectionViewController to work with. Now I needed to make it show something to verify it was working. By setting numberOfItemsInSection to 5 and creating a new CollecitonViewCell subclass and registering it in viewDidLoad, I now had a working CollectionView...</p><img src="https://chadarutherford.github.io/images/posts/TakeHomeChallenge/firstCVCells.png" alt="firstCVCells" width="500"/><p>The next step was to make the cells bigger and start adding and constraining items in it to match the design spec. I extended FeedCollectionViewController to conform to UICollectionViewDelegateFlowLayout and set up a <code></code><code>CGSize(width: collectionView.frame.width, height: 360)</code><code></code> and then added programmatic UI Elements. Starting with a UIImageView, I pinned it to the top of the contentView and constrained it's width and height. then I added 3 labels. One for the campaign name, price per download and a label to say "per install".</p><p>This is what my configureUI method looks like:</p><pre><code><span class="keyword">private func</span> configureUI() {
	contentView.<span class="call">addSubview</span>(iconImageView)
	contentView.<span class="call">addSubview</span>(nameLabel)
	contentView.<span class="call">addSubview</span>(payLabel)
	contentView.<span class="call">addSubview</span>(payPerInstallLabel)
	<span class="type">NSLayoutConstraint</span>.<span class="call">activate</span>([
		
		iconImageView.<span class="property">topAnchor</span>.<span class="call">constraint</span>(equalTo: contentView.<span class="property">topAnchor</span>, constant: <span class="number">20</span>),
		iconImageView.<span class="property">leadingAnchor</span>.<span class="call">constraint</span>(equalTo: contentView.<span class="property">leadingAnchor</span>, constant: <span class="number">20</span>),
		iconImageView.<span class="property">heightAnchor</span>.<span class="call">constraint</span>(equalToConstant: <span class="number">60</span>),
		iconImageView.<span class="property">widthAnchor</span>.<span class="call">constraint</span>(equalTo: iconImageView.<span class="property">heightAnchor</span>, multiplier: <span class="number">1</span>),
		
		nameLabel.<span class="property">topAnchor</span>.<span class="call">constraint</span>(equalTo: iconImageView.<span class="property">topAnchor</span>, constant: <span class="number">8</span>),
		nameLabel.<span class="property">leadingAnchor</span>.<span class="call">constraint</span>(equalTo: iconImageView.<span class="property">trailingAnchor</span>, constant: <span class="number">16</span>),
		nameLabel.<span class="property">trailingAnchor</span>.<span class="call">constraint</span>(greaterThanOrEqualTo: contentView.<span class="property">trailingAnchor</span>, constant: -<span class="number">20</span>),
		nameLabel.<span class="property">heightAnchor</span>.<span class="call">constraint</span>(equalToConstant: <span class="number">20</span>),
		
		payLabel.<span class="property">topAnchor</span>.<span class="call">constraint</span>(equalTo: nameLabel.<span class="property">bottomAnchor</span>),
		payLabel.<span class="property">leadingAnchor</span>.<span class="call">constraint</span>(equalTo: nameLabel.<span class="property">leadingAnchor</span>),
		payLabel.<span class="property">heightAnchor</span>.<span class="call">constraint</span>(equalToConstant: <span class="number">25</span>),
		payLabel.<span class="property">trailingAnchor</span>.<span class="call">constraint</span>(equalTo: payPerInstallLabel.<span class="property">leadingAnchor</span>, constant: -<span class="number">4</span>),
		
		payPerInstallLabel.<span class="property">topAnchor</span>.<span class="call">constraint</span>(equalTo: nameLabel.<span class="property">bottomAnchor</span>),
		payPerInstallLabel.<span class="property">heightAnchor</span>.<span class="call">constraint</span>(equalToConstant: <span class="number">25</span>)
	])
}
</code></pre><p>and here are the results:</p><img src="https://chadarutherford.github.io/images/posts/TakeHomeChallenge/dummyCVCells.png" alt="dummyCVCells" width="500"/><p>Now that I had a framework to display the data with, it was time to ping the server and popualte the UI Elements with real data. So I worked in the API calls, and routed the objects to their correct places using cellForRowAt. I decided to display it using the old UICollectionViewDataSource methods for now. Will re-implement with UICollectionViewDiffableDataSource later. So the network calls are back and the data has been validated using Unit Tests to make sure the JSON is being parsed correctly using Codable. Now it's time for the green light moment. Build and run and.......</p><img src="https://chadarutherford.github.io/images/posts/TakeHomeChallenge/feedCVCells.png" alt="feedCVCells" width="500"/><p>We have icons, names and price per download all populating correctly!</p><p>The next task was to populate the inner cells with buttons and images for "previews" of the video files at the URLs. So I againg went about laying out the framework for my UI Elements, using scaffolding and sizes for my dummy views and background colors so I could see the shape and size and get the layout looking good. So I added a collectionView property to each feed cell. and UI Elements to each cell. I needed two buttons and a UIImageView. The buttons would not change based on data so i laid them out the way they would be and used a blue blank image view to place the previews.</p><img src="https://chadarutherford.github.io/images/posts/TakeHomeChallenge/mediaCVCells.png" alt="mediaCVCells" width="500"/><p>The next task was to populate the image views with the preview thumbnails and play buttons for the video files. So off to another network call this time for the download URL attached to every Media object. This task was particularly easy as I already had the networking framework set up, all I had to do was call it. Build and run.....</p><img src="https://chadarutherford.github.io/images/posts/TakeHomeChallenge/mediaPreviewCVCells.png" alt="mediaPreviewCVCells" width="500"/><p>Perfect!</p><p>The last items were to add a copy link to clip board function connected to the link button:</p><pre><code>linkButton.<span class="call">addTarget</span>(<span class="keyword">self</span>, action: <span class="keyword">#selector</span>(copyLink), for: .<span class="dotAccess">touchUpInside</span>)
<span class="keyword">@objc private func</span> copyLink() {
	<span class="keyword">guard let</span> media = media <span class="keyword">else</span> { <span class="keyword">return</span> }
	<span class="keyword">let</span> pasteboard = <span class="type">UIPasteboard</span>.<span class="property">general</span>
	pasteboard.<span class="property">string</span> = media.<span class="property">trackingLink</span>.<span class="property">absoluteString</span>
}
</code></pre><p>this allows the user to copy the link for the video in that cell to their clipboard. And the final MVP task was to enable the user to download the video to their device. This is done here:</p><pre><code>downloadButton.<span class="call">addTarget</span>(<span class="keyword">self</span>, action: <span class="keyword">#selector</span>(downloadMedia), for: .<span class="dotAccess">touchUpInside</span>)
<span class="keyword">@objc private func</span> downloadMedia() {
	<span class="keyword">guard let</span> media = media <span class="keyword">else</span> { <span class="keyword">return</span> }
	<span class="type">DispatchQueue</span>.<span class="call">global</span>(qos: .<span class="dotAccess">background</span>).<span class="call">async</span> {
		<span class="keyword">if let</span> urlData = <span class="keyword">try</span>? <span class="type">Data</span>(contentsOf: media.<span class="property">downloadURL</span>) {
			<span class="keyword">let</span> documentsPath = <span class="type">NSSearchPathForDirectoriesInDomains</span>(.<span class="dotAccess">documentDirectory</span>, .<span class="dotAccess">userDomainMask</span>, <span class="keyword">true</span>)[<span class="number">0</span>]
			<span class="keyword">let</span> filePath = <span class="type">URL</span>(fileURLWithPath: <span class="string">"</span>\(documentsPath)<span class="string">/tempFile.mp4"</span>)
			<span class="type">DispatchQueue</span>.<span class="property">main</span>.<span class="call">async</span> {
				<span class="keyword">do</span> {
					<span class="keyword">try</span> urlData.<span class="call">write</span>(to: filePath)
				} <span class="keyword">catch</span> {
					<span class="call">print</span>(error)
				}
				<span class="type">PHPhotoLibrary</span>.<span class="call">shared</span>().<span class="call">performChanges</span> {
					<span class="type">PHAssetChangeRequest</span>.<span class="call">creationRequestForAssetFromVideo</span>(atFileURL: filePath)
				} completionHandler: { completed, error <span class="keyword">in
					if</span> completed {
						<span class="call">print</span>(<span class="string">"Video saved!"</span>)
					}
				}
			}
		}
	}
}
</code></pre><p>As a stretch (bonus) goal I wanted to implement functionality to enable the user to play the video file in AVPlayerViewController but I haven't figured out a solution to this yet. This was a fun project and even though I went 7 hours over the 3 hour limit, I learned a lot about CollectionViews and nesting them inside one another.</p><p>Til next time, Ciao! Chad</p>]]></content:encoded></item><item><guid isPermaLink="true">https://chadarutherford.github.io/posts/2020-09-05converting-jekyll-to-publish</guid><title>Switching from a Jekyll website to a Publish website</title><description>Learning how to generate a static Swift website using Publish by John Sundell.</description><link>https://chadarutherford.github.io/posts/2020-09-05converting-jekyll-to-publish</link><pubDate>Mon, 7 Sep 2020 20:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Old Site</p><img src="https://chadarutherford.github.io/images/posts/JekyllToPublish/OldSite.png" alt="Old Site" width="500"/><hr><h1>Creating a new publish project.</h1><p>When I set out to update my site from a Jekyll theme to Publish by John Sundell, I knew I was getting myself into some work. So I started by cloning the Publish repo and making a new Publish project. For those who don't know, Publish allows you to create a website made up entirely of Swift code and CSS. After cloning the repo, I went into terminal and typed the following:</p><pre><code>mkdir chadarutherford.<span class="property">github</span>.<span class="property">io</span>
cd chadarutherford.<span class="property">github</span>.<span class="property">io</span>
publish new
</code></pre><p>This created a new Publish project for me to work with. Now I needed to insert a markdown file from my old portfolio site, to test how this worked. I immediately found out that no longer did I need to wrap my metadata tags with quotes. Publish converts the metadata to strings without enclosing it in quotes. Also I learned, that I had to update the date from 00:00:00 format to 00:00 format. Publish didn't like the last set of zeroes. Also any arrays you have inside your markdown files, need the brackets removed to work with Publish.</p><p>Once I was sure I had formulated my markdown documents correctly I entered the following in my terminal:</p><pre><code>publish run
</code></pre><p>This started up the local server on my MacBook, and "published" my site, converting Swift code into HTML, and packaging everything up nicely into an output folder that is read by the browser for display.</p><p>So I had a "blog site". But this wasn't appealing as I wanted it to be much more than a blogging site. So I dove into some tutorials and found an excellent tutorial by Povilas Staškus, titled "Migrating from Jekyll to Publish: A site generator for Swift developers". After following his tutorial and developing my site, I wqas happy with the results..... almost. I took the basic template he developed and tweaked it to serve my purpose and found that by diving into the code and determining what was happening, It was all too easy to develop my site, fit for my needs using Swift code. After creating a PortfolioFactory that conforms to HTMLFactory, I was able to quickly transform the old site into a new portfolio site that I am more capable of maintaining.</p><p>The default setup made for the posts, only allowed the site to return all items (which was an array of all the markdown files in the project). This was inconvenient for me as I wanted my projects and blog posts on different pages. So after some research, I found that you can list items based on the tags you've assigned to them. Armed with this new knowledge, I tagged all my blog posts with the tag "Blog" and populated the blog posts section with this code:</p><pre><code>.<span class="call">posts</span>(
	for: context.<span class="call">items</span>(
		taggedWith: <span class="string">"Blog"</span>,
		sortedBy: \.<span class="property">date</span>,
		order: .<span class="dotAccess">descending</span>
	),
	on: context.<span class="property">site</span>,
	title: <span class="string">"Recent Projects"</span>
),
</code></pre><p>After seeing that this worked well for my needs, I tagged all my projects with the tag "Project" and populated the same sections using the "Project" tag. That resulted in the following code for <code></code><code>makeSectionHTML(for:context:) throws -&gt; HTML</code><code></code>:</p><pre><code><span class="keyword">if</span> section.<span class="property">id</span> == .<span class="dotAccess">projects</span> {
	<span class="keyword">return</span> <span class="type">HTML</span>(
		.<span class="call">lang</span>(context.<span class="property">site</span>.<span class="property">language</span>),
		.<span class="call">head</span>(for: context.<span class="property">site</span>),
		.<span class="call">body</span>(
			.<span class="call">grid</span>(
				.<span class="call">header</span>(for: context.<span class="property">site</span>),
				.<span class="call">sidebar</span>(for: context.<span class="property">site</span>),
				.<span class="call">posts</span>(
					for: context.<span class="call">items</span>(
						taggedWith: <span class="string">"Project"</span>,
						sortedBy: \.<span class="property">date</span>,
						order: .<span class="dotAccess">descending</span>
					),
					on: context.<span class="property">site</span>,
					title: <span class="string">"Recent Projects"</span>
				),
				.<span class="call">footer</span>(for: context.<span class="property">site</span>)
			)
		)
	)
} <span class="keyword">else if</span> section.<span class="property">id</span> == .<span class="dotAccess">posts</span> {
	<span class="keyword">return</span> <span class="type">HTML</span>(
		.<span class="call">lang</span>(context.<span class="property">site</span>.<span class="property">language</span>),
		.<span class="call">head</span>(for: context.<span class="property">site</span>),
		.<span class="call">body</span>(
			.<span class="call">grid</span>(
				.<span class="call">header</span>(for: context.<span class="property">site</span>),
				.<span class="call">sidebar</span>(for: context.<span class="property">site</span>),
				.<span class="call">posts</span>(
					for: context.<span class="call">items</span>(
						taggedWith: <span class="string">"Blog"</span>,
						sortedBy: \.<span class="property">date</span>,
						order: .<span class="dotAccess">descending</span>
					),
					on: context.<span class="property">site</span>,
					title: <span class="string">"Recent Projects"</span>
				),
				.<span class="call">footer</span>(for: context.<span class="property">site</span>)
			)
		)
	)
} <span class="keyword">else</span> {
	<span class="keyword">return</span> <span class="type">HTML</span>(
		.<span class="call">lang</span>(context.<span class="property">site</span>.<span class="property">language</span>),
		.<span class="call">head</span>(for: context.<span class="property">site</span>),
		.<span class="call">body</span>(
			.<span class="call">grid</span>(
				.<span class="call">header</span>(for: context.<span class="property">site</span>),
				.<span class="call">sidebar</span>(for: context.<span class="property">site</span>),
				.<span class="call">pageContent</span>(.<span class="call">h1</span>(.<span class="call">text</span>(section.<span class="property">title</span>))),
				.<span class="call">footer</span>(for: context.<span class="property">site</span>)
			)
		)
	)
}
</code></pre><p>The only remaining thing I had to do was get my images working. Since the markdown parser inside Publish wouldn't let me assign a default width to my images, when I could, I wrapped all images in an <img> tag. Now I had my portfolio site up and running locally and it was looking exactly how I wanted it to.

Finally it was time to make it live. So I followed a tutorial by David Collado Sela titled <a href="https://blog.bitomule.com/posts/automating-deploy-of-your-publish-site-to-github-pages/">Automating deploy of your publish site to GutHub Pages</a>. I deleted all the code inside my existing GitHub repo, that hosted my Jekyll site, and published my site to a new location, ```chadarutherford.io```. Now I have a live Publish site and it is much more easily maintainable.
</p>]]></content:encoded></item><item><guid isPermaLink="true">https://chadarutherford.github.io/posts/2020-08-04study-note-post</guid><title>Creating A Study Note App</title><description>Building a Flash Card Study App</description><link>https://chadarutherford.github.io/posts/2020-08-04study-note-post</link><pubDate>Tue, 4 Aug 2020 18:00:00 +0000</pubDate><content:encoded><![CDATA[<h2>Creating a Study Note App</h2><hr><p>For this app, I decided to take a popular app and put my spin on it. My fiancée is going back to nursing school and I decided it would be easy to make an application for her to carry her flash cards AKA study notes with her. So I set out building this app.</p><p>To start off, I implemented the entire app's UI programmatically. So I dove into the Scene Delegate and set up the following inside <code></code><code>scene(_ : willConnectTo: options:)</code><code></code>:</p><pre><code><span class="keyword">guard let</span> windowScene = scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span> <span class="keyword">else</span> { <span class="keyword">return</span> }
window = <span class="type">UIWindow</span>(windowScene: windowScene)
window?.<span class="property">windowScene</span> = windowScene
<span class="keyword">let</span> loginVC = <span class="type">LoginViewController</span>(nibName: <span class="keyword">nil</span>, bundle: <span class="keyword">nil</span>)
window?.<span class="property">rootViewController</span> = <span class="type">UINavigationController</span>(rootViewController: loginVC)
window?.<span class="call">makeKeyAndVisible</span>()
</code></pre><p>I got rid of the parentheses around <code></code><code>scene as? UIWindowScene</code><code></code> as I was now going to use the scene itself. I then instantiated the window, passing in the windowScene as it's only parameter, and set the window's windowScene property to the unwrapped windowScene. I then created an instance of my (poorly named) LoginViewController, setting nibName and bundle to nil, as I wasn't using XIBs or the Storyboard. I then set the rootViewController of the window to a UINavigationController, and set the rootViewController for that to my loginVC. Then calling <code></code><code>.makeKeyAndVisible()</code><code></code> on the window, makes the window come on screen.</p><p>I then set up my CoreData model and entities. I made a Note class that has an answer and an NSOrderedSet of clues. Then I set up a Clue class that has a text property and a relationship to the Note class. I set up extensions to the classes to create convenience initializers and a CoreDataStack singleton to handle ease of use across my app.</p><p>I then got to work on my main ViewController. I created view objects as closures for all UI elements and I'm configuring the UI inside a helper method, that I then call in <code></code><code>viewDidLoad()</code><code></code>. When the view loads, I'm performing a fetch from CoreData and populating the view for testing.</p><img src="https://chadarutherford.github.io/images/posts/StudyNotes/StudyModeView.png" alt="StudyModeView" width="500"/><p>The UI was set up. Next I enabled the ability to add Cards, Taking in the note selected and unwrapping the text from the textFields in AddCardViewController. Once they were set up, I created an OrderedSet of the clues, saved it to the Note, and made a call to <code></code><code>save()</code><code></code> on my CoreDataStacks main view context, saving them to device.</p><p>Now I had basic working creation and reading of Cards. I added a CategoryTableViewController to the project and Category entity to CoreData with a title, and an NSOrderedSet of Note(s), and started building the functionality to add categories to the app. I populated the app with seed data at first, and then went to work on the UI. The cells were populating but I spent a lot of time trying to get that "just right" look. I was setting up a plain UIView and adding a gradient and then trying to constrain it. It took me a good hour and a half before I reached out for help, but after a short conversation, thanks to Dillon McElhinney, I discovered there's a better way to handle that with a <code></code><code>GradientView</code><code></code>. Once my UI was set up the way I liked it, I enabled users to add categories via a modal pop up view controller.</p><img src="https://chadarutherford.github.io/images/posts/StudyNotes/addCategoryPopup.png" alt="Category popup" width="500"/><p>After I was able to create categories, the next natural progression, was to add cards to that category. This is where I hit another bump in the road. I followed my instincts and set up an array of Notes, and tried to add it to the category. iOS was not happy about that change at all, and upon trying to save cards, the app came crashing down. After a short search, I found the answer to my troubles on SO. and this is what I came up with as a solution:</p><pre><code><span class="keyword">guard let</span> category = category <span class="keyword">else</span> { <span class="keyword">return</span> }
		<span class="keyword">let</span> mutableNotes = category.<span class="property">notes</span>?.<span class="call">mutableCopy</span>() <span class="keyword">as</span>! <span class="type">NSMutableOrderedSet</span>
		<span class="keyword">let</span> note = <span class="type">Note</span>(answer: answer, clues: <span class="type">NSOrderedSet</span>(array: clues))!
		mutableNotes.<span class="call">add</span>(note)
		category.<span class="property">notes</span> = (mutableNotes.<span class="call">copy</span>() <span class="keyword">as</span>! <span class="type">NSOrderedSet</span>)
</code></pre><p>This allowed me to add cards to categories, but I wasn't happy with the UI. If the user typed text that was longer than the textField, it followed the cursor and you weren't able to see the entire text you entered. So after some thought, I conformed to UITextFieldDelegate and called the <code></code><code>textFieldShouldBeginEditing(_ :) </code><code></code> method and inside there presented another modal popup view containing only a UITextView and a save and cancel button, along with the textField that presented the view controller.</p><img src="https://chadarutherford.github.io/images/posts/StudyNotes/clueTextViewPopup2.png" alt="Clue TextView popup" width="500"/><p>Now inside TextViewPopoverViewController I created a TextViewPopoverDelegate and laid out the framework:</p><pre><code><span class="keyword">protocol</span> TextViewPopoverDelegate: <span class="type">AnyObject</span> {
	<span class="keyword">func</span> textViewDidSave(text: <span class="type">String</span>, into textField: <span class="type">UITextField</span>)
}
</code></pre><p>I set a <code></code><code>weak var delegate: TextViewPopoverDelegate?</code><code></code> property on my popover and now, once a user clicks on the save button, the delegate fires, and dismisses back to the AddCardVC and fills in the text on the TextField.<br> After all my work, I now have a complete version 1 to add to the AppStore and TestFlight. Here is a GIF of my progress: <img src="https://chadarutherford.github.io/images/posts/StudyNotes/StudyNotes.gif" alt="StudyNotes gif" width="500"/></p><p><a href="https://testflight.apple.com/join/UOpOJWhq">Link to TestFlight</a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://chadarutherford.github.io/projects/Swaap</guid><title>Swaap</title><description>App for iOS 13+</description><link>https://chadarutherford.github.io/projects/Swaap</link><pubDate>Wed, 29 Apr 2020 16:00:00 +0000</pubDate><content:encoded><![CDATA[<img src="https://chadarutherford.github.io/images/projects/swaap/swaapConnect.png" alt="Swaap Connect Screen" width="500"/><h2>Swaap</h2><hr><ul><li>"Digital Business Card" Application that allows users to quickly exchange contact information</li><li>Uses Core Data and NSURLSession to fetch and save contacts.</li><li>Uses Auth0 to authenticate users.</li><li>Code written with UI Tests and Unit tests to verify functionality.</li><li>Utilizes NSOperationQueue to perform networking tasks concurrently.</li><li>QR Code functionality to enable quick exchange of contact information</li><li>UIActivityViewController support to share public link to allow non-users to save contact information without needing to sign up on the spot.</li></ul><p><a href="https://github.com/Lambda-School-Labs/conference-contacts-ios">Project</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://chadarutherford.github.io/posts/2020-04-24spm-post</guid><title>Creating a networking framework</title><description>Facing the issues of access levels and creating a SPM Framework</description><link>https://chadarutherford.github.io/posts/2020-04-24spm-post</link><pubDate>Fri, 24 Apr 2020 18:00:00 +0000</pubDate><content:encoded><![CDATA[<h2>Creating a Framework for SPM</h2><hr><p>I recently decided with my growing experience with Swift programming, that it would be an exciting adventure to create a Swift package to use with SPM (Swift Package Manager). It was a small task, just to get some experience with creating an external library.</p><p>I started off very small with a networking manager. I implemented a networking class, complete with the new Result type and Swift Generics to enable quick decoding without cluttering up my project with most of the boilerplate networking code most developers write over and over again.</p><p>So to enable custom errors I implemented my own NetworkError enum.</p><pre><code><span class="keyword">enum</span> NetworkError: <span class="type">Error</span> {
	<span class="keyword">case</span> unknownError
	<span class="keyword">case</span> invalidResponse
	<span class="keyword">case</span> invalidData
	<span class="keyword">case</span> decodeError
	
	<span class="keyword">var</span> localizedDescription: <span class="type">String</span> {
		<span class="keyword">switch self</span> {
		<span class="keyword">case</span> .<span class="dotAccess">unknownError</span>:
			<span class="keyword">return</span> <span class="string">"An unknown error occurred"</span>
		<span class="keyword">case</span> .<span class="dotAccess">invalidResponse</span>:
			<span class="keyword">return</span> <span class="string">"The response from the server was invalid. Please try again"</span>
		<span class="keyword">case</span> .<span class="dotAccess">invalidData</span>:
			<span class="keyword">return</span> <span class="string">"The data returned from the server was invalid."</span>
		<span class="keyword">case</span> .<span class="dotAccess">decodeError</span>:
			<span class="keyword">return</span> <span class="string">"There was an error decoding objects."</span>
		}
	}
}
</code></pre><p>After that, I decided to enumerate the different HTTP Methods to remove hard-coded strings in my projects</p><pre><code><span class="keyword">enum</span> HTTPMethod: <span class="type">String</span> {
	<span class="keyword">case get</span> = <span class="string">"GET"</span>
	<span class="keyword">case</span> post = <span class="string">"POST"</span>
	<span class="keyword">case</span> delete = <span class="string">"DELETE"</span>
	<span class="keyword">case</span> put = <span class="string">"PUT"</span>
}
</code></pre><p>Now that I had the basic building blocks for a network call, I decided to make a network loader protocol so that I could mock network calls to enable easier testing. Also making sure to extend URLSession and make it adhere to my protocol.</p><pre><code><span class="keyword">protocol</span> NetworkDataLoader {
	<span class="keyword">func</span> loadData(using url: <span class="type">URL</span>, completion: <span class="keyword">@escaping</span> (<span class="type">Data</span>?, <span class="type">HTTPURLResponse</span>?, <span class="type">Error</span>?) -&gt; <span class="type">Void</span>)
	<span class="keyword">func</span> loadData(using request: <span class="type">URLRequest</span>, completion: <span class="keyword">@escaping</span> (<span class="type">Data</span>?, <span class="type">HTTPURLResponse</span>?, <span class="type">Error</span>?) -&gt; <span class="type">Void</span>)
}

<span class="keyword">extension</span> <span class="type">URLSession</span>: <span class="type">NetworkDataLoader</span> {
	<span class="keyword">func</span> loadData(using url: <span class="type">URL</span>, completion: <span class="keyword">@escaping</span> (<span class="type">Data</span>?, <span class="type">HTTPURLResponse</span>?, <span class="type">Error</span>?) -&gt; <span class="type">Void</span>) {
		<span class="call">dataTask</span>(with: url) { data, response, error <span class="keyword">in</span>
			<span class="call">completion</span>(data, response <span class="keyword">as</span>? <span class="type">HTTPURLResponse</span>, error)
		}.<span class="call">resume</span>()
	}
	
	 <span class="keyword">func</span> loadData(using request: <span class="type">URLRequest</span>, completion: <span class="keyword">@escaping</span> (<span class="type">Data</span>?, <span class="type">HTTPURLResponse</span>?, <span class="type">Error</span>?) -&gt; <span class="type">Void</span>) {
		<span class="call">dataTask</span>(with: request) { data, response, error <span class="keyword">in</span>
			<span class="call">completion</span>(data, response <span class="keyword">as</span>? <span class="type">HTTPURLResponse</span>, error)
		}.<span class="call">resume</span>()
	}
}
</code></pre><p>With all that done, now it was time to dive into the networking. I made a generic decoding method to decode whatever objects you throw at it with ease.</p><pre><code><span class="keyword">private func</span> decode&lt;T: <span class="type">Decodable</span>&gt;(to type: <span class="type">T</span>.<span class="type">Type</span>, data: <span class="type">Data</span>) -&gt; <span class="type">T</span>? {
	<span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()
	<span class="keyword">do</span> {
		<span class="keyword">let</span> decodedType = <span class="keyword">try</span> decoder.<span class="call">decode</span>(<span class="type">T</span>.<span class="keyword">self</span>, from: data)
		<span class="keyword">return</span> decodedType
	} <span class="keyword">catch</span> {
		<span class="keyword">return nil</span>
	}
}
</code></pre><p>Finally, one more method left to enable me to run networking calls. I had to write a decodeObjects method to take advantge of my new decode method. I added an initializer to set the networking mechanism which allowed me to swap out a mock class for URLSession when it came time to write tests. I also included a Set of known success codes for HTTP Responses. After drilling through and handling all errors, I finally get to "the happy path" and decode my objects.</p><pre><code><span class="keyword">private let</span> networkLoader: <span class="type">NetworkDataLoader</span>
<span class="keyword">private let</span> expectedResponseCodes = <span class="type">Set</span>.<span class="keyword">init</span>(<span class="number">200</span> ... <span class="number">299</span>)

<span class="keyword">init</span>(networkLoader: <span class="type">NetworkDataLoader</span> = <span class="type">URLSession</span>.<span class="property">shared</span>) {
	<span class="keyword">self</span>.<span class="property">networkLoader</span> = networkLoader
}

<span class="keyword">func</span> decodeObjects&lt;T: <span class="type">Decodable</span>&gt;(using url: <span class="type">URL</span>, completion: <span class="keyword">@escaping</span> (<span class="type">Result</span>&lt;<span class="type">T</span>, <span class="type">NetworkError</span>&gt;) -&gt; <span class="type">Void</span>) {
	networkLoader.<span class="call">loadData</span>(using: url) { data, response, error <span class="keyword">in
		guard</span> error == <span class="keyword">nil else</span> {
			<span class="call">completion</span>(.<span class="call">failure</span>(.<span class="dotAccess">unknownError</span>))
			<span class="keyword">return</span>
		}
		
		<span class="keyword">if let</span> response = response, !<span class="keyword">self</span>.<span class="property">expectedResponseCodes</span>.<span class="call">contains</span>(response.<span class="property">statusCode</span>) {
			<span class="call">completion</span>(.<span class="call">failure</span>(.<span class="dotAccess">invalidResponse</span>))
			<span class="keyword">return</span>
		}
		
		<span class="keyword">guard let</span> data = data <span class="keyword">else</span> {
			<span class="call">completion</span>(.<span class="call">failure</span>(.<span class="dotAccess">invalidData</span>))
			<span class="keyword">return</span>
		}
		
		<span class="keyword">guard let</span> results = <span class="keyword">self</span>.<span class="call">decode</span>(to: <span class="type">T</span>.<span class="keyword">self</span>, data: data) <span class="keyword">else</span> {
			<span class="call">completion</span>(.<span class="call">failure</span>(.<span class="dotAccess">decodeError</span>))
			<span class="keyword">return</span>
		}
		
		<span class="call">completion</span>(.<span class="call">success</span>(results))
	}
}
</code></pre><p>Now that all looks great right? Generic code, no build errors , bundled up into a Swift Package so I can import it into any project and networking worries are gone right?</p><p>Wrong!</p><p>The experienced iOS developers would see the issue in a heartbeat. This works fine for testing and networking in this bundle. But once imported into another project, I had no access to my initializer or any of my methods.</p><p>So back to the drawing board. I eventually discovered my issue was access control.</p><p>So I made the following changes.</p><pre><code><span class="keyword">public enum</span> NetworkError: <span class="type">Error</span> { ...
	<span class="keyword">public var</span> localizedDescription: <span class="type">String</span> {
		...
	}
}

<span class="keyword">public enum</span> HTTPMethod: <span class="type">String</span> {
	...
}

<span class="keyword">public protocol</span> NetworkDataLoader {
	...
}

<span class="keyword">extension</span> <span class="type">URLSession</span>: <span class="type">NetworkDataLoader</span> {
	<span class="keyword">public func</span> loadData(using url: <span class="type">URL</span>, completion: <span class="keyword">@escaping</span> (<span class="type">Data</span>?, <span class="type">HTTPURLResponse</span>?, <span class="type">Error</span>?) -&gt; <span class="type">Void</span>) {
		...
	}
	
	 <span class="keyword">public func</span> loadData(using request: <span class="type">URLRequest</span>, completion: <span class="keyword">@escaping</span> (<span class="type">Data</span>?, <span class="type">HTTPURLResponse</span>?, <span class="type">Error</span>?) -&gt; <span class="type">Void</span>) {
		...
	}
}

<span class="keyword">public init</span>(networkLoader: <span class="type">NetworkDataLoader</span> = <span class="type">URLSession</span>.<span class="property">shared</span>) {
	...	
}

<span class="keyword">public func</span> decodeObjects&lt;T: <span class="type">Decodable</span>&gt;(using url: <span class="type">URL</span>, completion: <span class="keyword">@escaping</span> (<span class="type">Result</span>&lt;<span class="type">T</span>, <span class="type">NetworkError</span>&gt;) -&gt; <span class="type">Void</span>) {
	...
}

</code></pre><p>Success! I was now able to access the "public API" of my framework and run the methods I had worked so hard on writing.</p><p>I tested out my framework in a simple TableView by querying the pokeAPI and achieved success. My generic decoder was working and I now had populated a TableView with data from an API and had absolutely zero networking code in my app aside from the framework I created and imported into my app with Swift Package Manager!</p><p>I can't wait to further my knowledge and create a framework that is more powerful, but this was a fun start and I learned a lot about creating and managing frameworks and access levels.</p><p>Stay tuned for more goodies as I expand my knowledge and create more cool tools!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://chadarutherford.github.io/projects/CruiseAlong</guid><title>Cruise Along</title><description>App for iOS 13+</description><link>https://chadarutherford.github.io/projects/CruiseAlong</link><pubDate>Mon, 2 Mar 2020 14:00:00 +0000</pubDate><content:encoded><![CDATA[<img src="https://chadarutherford.github.io/images/projects/cruiseAlong/cruiseAlongLoginScreen.png" alt="Cruise Along Login Screen" width="500"/><h2>Cruise Along</h2><hr><ul><li>GPS application designed for motorcycle enthusiasts.</li><li>Uses TomTom Maps API along with NSURLSession and NSOperationQueue to fetch addresses and routes avoiding unpaved roads.</li><li>Saves user addresses inside CoreData with persistence to CloudKit</li><li>Users authenticated using Sign In With Apple</li><li>Displays routes on MKMapView using route coordinates and MKGeosdesicPolyline</li></ul><p><a href="https://github.com/chadarutherford/CruiseAlong">Project</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://chadarutherford.github.io/projects/HomeChoreTracker</guid><title>Home Chore Tracker</title><description>App for iOS 13+</description><link>https://chadarutherford.github.io/projects/HomeChoreTracker</link><pubDate>Mon, 3 Feb 2020 14:00:00 +0000</pubDate><content:encoded><![CDATA[<img src="https://chadarutherford.github.io/images/projects/homeChoreTracker/homeChoreTrackerScreenShot.png" alt="Home Chore Tracker Screenshot" width="500"/><h2>Home Chore Tracker</h2><hr><ul><li>Companion application that allows children to log into their account and complete chores that have been assigned to them</li><li>Uses Core Data and NSURLSession to fetch and save chores.</li><li>Uses JSON WebTokens to authenticate users.</li><li>Code written with UI Tests and Unit tests to verify functionality.</li><li>Utilizes NSOperationQueue to perform networking tasks concurrently.</li><li>Images are stored on Firebase Storage.</li></ul><p><a href="https://github.com/BuildWeekHomeChoreTracker/iOS">Project</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://chadarutherford.github.io/projects/FoodTruckTrackr</guid><title>FoodTruckTrackr</title><description>App for iOS 13+</description><link>https://chadarutherford.github.io/projects/FoodTruckTrackr</link><pubDate>Mon, 6 Jan 2020 13:00:00 +0000</pubDate><content:encoded><![CDATA[<img src=""/><img src="https://chadarutherford.github.io/images/projects/foodTruckTrackr/foodTruckTrackrScreenShot.png" alt="FoodTruckTrackr Screenshot" width="500"/><h2>Food Truck Trackr</h2><hr><ul><li>Application that allows users to save their favorite food trucks in the local area and get real time updates to it's location.</li><li>Uses Core Data and NSURLSession to fetch and save favorites</li><li>Uses JSON WebTokens to authenticate users.</li></ul><p><a href="https://github.com/BW-BH-FoodTruck2/ios">Project</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://chadarutherford.github.io/projects/DailyDose</guid><title>Daily Dose</title><description>App for iOS 13+</description><link>https://chadarutherford.github.io/projects/DailyDose</link><pubDate>Mon, 18 Nov 2019 12:00:00 +0000</pubDate><content:encoded><![CDATA[<img src="https://chadarutherford.github.io/images/projects/dailyDose/dailyDose.png" alt="Daily Dose Screenshot" width="500"/><h2>Daily Dose</h2><hr><ul><li>Application that allows users to save their daily medications.</li><li>When medications are persisted, it schedules a daily notification that fires at dosage time</li><li>When user's remaining doses drops below 10 it schedules a notification to go off every morning reminding them to refill.</li></ul><p><a href="https://github.com/chadarutherford/PillReminder">Project</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://chadarutherford.github.io/projects/cloudWishList</guid><title>Cloud Wish List</title><description>App for iOS 12+ Including CoreData and CloudKit support</description><link>https://chadarutherford.github.io/projects/cloudWishList</link><pubDate>Fri, 30 Mar 2018 15:00:00 +0000</pubDate><content:encoded><![CDATA[<img src="https://chadarutherford.github.io/images/projects/cloudWishList/cloudWishListScreenShot.png" alt="Cloud Wish List Screenshot" width="500"/><h2>Cloud Wish List</h2><hr><ul><li>Uses the Walmart Labs API and URLSession to query for items to add to the user's "Wish List"</li><li>Wish Lists are saved to CoreData with child references to the people in the list and their items and stored in CloudKit</li></ul><p><a href="https://github.com/chadarutherford/WalmartWishList">Project</a>.</p>]]></content:encoded></item></channel></rss>